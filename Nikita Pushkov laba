#include "stdio.h"
#include "stdlib.h"
#include "time.h"
#include <windows.h>

static int proverka(int arr[], int len) {
	for (int i = 0; i < len - 1; i++)
		if (arr[i] > arr[i + 1]) {
			return 1;
		}
	return 0;
}

static void enter_array(int array[], int len) {
	int i = 0;
	int temp;
	for (i; i < len; i++) {
		scanf_s("%d", &temp);
		array[i] = temp;
	}
}

static void random_array(int array[], int len, int a, int b) {
	for (int i = 0; i < len; i++)
		array[i] = rand() % (b - a + 1) + a;
}

static void print_array(int array[], int len) {
	int i = 0;
	for (i; i < len; i++) {
		printf("%d" " ", array[i]);
	}
	printf("\n");
}

static int type_enter_array(int arr[]) {
	printf("Select the array input mathod\n");
	printf("1. By yourself\n");
	printf("2. Random\n");
	int type;
	scanf_s("%d", &type);
	while (type != 1 && type != 2) {
		printf("Error!!!\n");
		printf("Enter the number again\n");
		scanf_s("%d", &type);
	}
	int len;
	printf("Size array:\n");
	scanf_s("%d", &len);
	while (len > 10000) {
		printf("Max size array 10000!\n");
		printf("Repair the input\n");
		printf("Size array:\n");
		scanf_s("%d", &len);
	}
	if (type == 1) {
		printf("Enter numbers:\n");
		for (int j = 0; j < len; j++)
			scanf_s("%d", &arr[j]);
	}
	else {
		int left, right;
		printf("Enter the left border\n");
		scanf_s("%d", &left);
		printf("Enter the right border\n");
		scanf_s("%d", &right);
		random_array(arr, len, left, right);
	}
	print_array(arr, len);
	printf("the array has been created!!!\n");
	return len;
}

static void print_menu()
{
	printf("select an action:\n");
	printf("1. Linear search\n");
	printf("2. Binar search\n");
	printf("3. Bubble sort\n");
	printf("4. Insertion sort\n");
	printf("5. Selection sort\n");
	printf("6. Quick sort\n");
	printf("7. Podschet sort\n");
    printf("8. Input array\n");
	printf("0. Exit\n");
}

static void Linear_search(int arr[], int len, int a) {
	int index = -1, cnt = 0;
	for (int i = 0; i < len; i++) {
		cnt++;
		if (arr[i] == a) {
			index = i;
			break;
		}
	}
	if (index != -1) {
		printf("Linear search find number\n");
		printf("Index = %d\n", index);
		printf("number of comparisons:%d \n", cnt);
	}
	else printf("the number is not in the array");
}

static void Binar_search( int mass[], int len, int a)
{
	int cnt = 0;
	int ind = -1;
	int low, high, middle;
	low = 0;
	high = len;
	while (low <= high)
	{
		cnt++;
		middle = (low + high) / 2;
		if (a < mass[middle])
			high = middle - 1;
		else if (a > mass[middle])
			low = middle + 1;
		else if (a == mass[middle]) {
			ind = middle;
			break;
		}
	}
	if (ind != -1) {
		printf("Binar search find number\n");
		printf("Index = %d\n", ind);
		printf("number of comparisons:%d \n", cnt);
	}
	else {
		printf("the number is not in the array\n");
	}
}

static void Bubble_sort(int arr[], int len)
{
	int flag = 0;
	int l = 0, r = len - 1, cnt = 0;
	while (l <= r) {
		flag = 0;
		for (int i = r; i > l; i--) {
			if (arr[i - 1] > arr[i]) {
				int t = arr[i - 1];
				arr[i - 1] = arr[i];
				arr[i] = t;
				flag = 1;
			}
			cnt++;
		}
		++l;
		cnt++;
		for (int i = l; i<r;i++){
			if (arr[i] > arr[i + 1]) {
				int t = arr[i + 1];
				arr[i + 1] = arr[i];
				arr[i] = t;
				flag = 1;
			}
			cnt++;
		}
		--r;
		cnt++;
		if (flag = 0) break;
	}
	printf("sorting completed\n");
	print_array(arr, len);
	printf("number of comparisons:%d \n", cnt);
}

static void Insertion_sort(int arr[], int n)//вставка
{
	int el, ind, cnt = 0;
	for (int i = 1; i < n; i++)
	{
		el = arr[i];
		ind = i - 1;
		while (ind >= 0 && arr[ind] > el){
			arr[ind + 1] = arr[ind];
			ind = ind - 1;
			cnt++;
		}
		arr[ind + 1] = el;
	}
	printf("sorting completed\n");
	printf("number of comparisons:%d \n", cnt);
}

static void selectionSort(int arr[], int N)//выбор 
{	int cnt = 0;
	for (int i = 0; i < N - 1; i++) {
		int min_idx = i;
		for (int j = i + 1; j < N; j++) {
			if (arr[j] < arr[min_idx]) {
				min_idx = j;
				cnt++;
			}
		}
		int temp = arr[min_idx];
		arr[min_idx] = arr[i];
		arr[i] = temp;
	}
	printf("sorting completed\n");
	printf("number of comparisons:%d \n", cnt);
}

static void quicksort(int arr[], int lf, int rt) {
	int cnt = 0;
	if (lf < rt) {
		int mid = arr[(lf + rt) / 2];
		int i = lf;
		int j = rt;
		int temp;

		while (i <= j) {
			while (arr[i] < mid) i++;
			while (arr[j] > mid) j--;

			if (i <= j) {
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
				i++;
				j--;
				cnt++;
			}
		}
		if (lf < j) quicksort(arr, lf, j);
		if (i < rt) quicksort(arr, i, rt);
	}
	printf("sorting completed\n");
	printf("number of comparisons:%d \n", cnt);
}

static void Podschet_sorted(int arr[], int n) {
	int sortarr[10000 * 2] = { 0 };
	int i, j;
	int index = 0;
	for (i = 0; i < n; i++){
		sortarr[arr[i] + 10000]++;
	}
	for (i = 0; i < 10000 * 2; i++){
		for (j = 0; j < sortarr[i]; j++) {
			arr[index] = i - 10000;
			index++;
		}
	}
}

static void copy_array(int array[], int copy[], int len) {
	for (int i = 0; i < len; i++) {
		copy[i] = array[i];
	}
}


int main()
{
	int arr[10000];
	int n = type_enter_array(arr);
	int sortarr[10000];
	int ch;
	print_menu();
	int a = -1;
	int cnt = 0;
	LARGE_INTEGER freq, start, finish;
	double time;
	QueryPerformanceFrequency(&freq);
	while (a != 0) {
		scanf_s("%d", &a);
		switch (a)
		{
		case 1:
			printf("number to determine:");
			scanf_s("%d", &ch);
			Linear_search(arr, n, ch);
			break;
		case 2:
			printf("number to determine:");
			scanf_s("%d", &ch);
			Binar_search(arr,n, ch);
			break;
		case 3:
			QueryPerformanceCounter(&start);
			Bubble_sort(arr, n);
			QueryPerformanceCounter(&finish);
			time = (double)(finish.QuadPart - start.QuadPart) / (double)freq.QuadPart;
			printf("Your time: %0.7f\n", time);
			break;
		case 4:
			QueryPerformanceCounter(&start);
			Insertion_sort(arr, n);
			QueryPerformanceCounter(&finish);
			time = (double)(finish.QuadPart - start.QuadPart) / (double)freq.QuadPart;
			printf("Your time: %0.7f\n", time);
			break;
		case 5:
			QueryPerformanceCounter(&start);
			selectionSort(arr, n);
			QueryPerformanceCounter(&finish);
			time = (double)(finish.QuadPart - start.QuadPart) / (double)freq.QuadPart;
			printf("Your time: %0.7f\n", time);
			break;
		case 6:
			QueryPerformanceCounter(&start);
			quicksort(arr,0 , n);
			QueryPerformanceCounter(&finish);
			time = (double)(finish.QuadPart - start.QuadPart) / (double)freq.QuadPart;
			printf("Your time: %0.7f\n", time);
			break;
		case 7:
			QueryPerformanceCounter(&start);
			Podschet_sorted(arr,n);
			QueryPerformanceCounter(&finish);
			time = (double)(finish.QuadPart - start.QuadPart) / (double)freq.QuadPart;
			printf("Your time: %0.7f\n", time);
			break;
		case 8:
			print_array(arr, n);
			break;
		default:
			break;
		}
		if ((a >= 3) && (a <= 7)) {
			if (proverka(arr, n)) {
				printf("Sorted not done");
			}
			else printf("Sorted done");
		}
	}
	return 0;
}
